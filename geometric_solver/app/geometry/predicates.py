# app/geometry/predicates.py

"""
================================================================================
 鲁棒几何谓词模块 (app/geometry/predicates.py)
================================================================================

模块功能:
本模块旨在解决计算几何中一个普遍且棘手的难题：浮点数计算的不可靠性。
它通过封装一个专业的“鲁棒几何谓词”库，来保证算法在任何情况下都能做出
正确的几何决策，从而确保系统的稳定性和结果的正确性。

问题的根源 (鲁棒性问题):
- 计算机使用有限的位数存储小数（如64位浮点数），这会导致无法避免的精度损失。
- 在进行几何判断时（例如，判断三个点是否共线，或一个点是否在圆内），这种
  微小的舍入误差可能导致一个真实值为零的计算结果被错误地判断为正数或负数。
- 这种错误的判断会使算法在关键的分支处走上错误的路径，最终可能导致逻辑矛盾、
  程序崩溃或得出完全错误的结果。

解决方案 (自适应精度浮点运算):
- 我们集成的库采用了计算几何领域的黄金标准：Jonathan Shewchuk 提出的算法。
- 其核心思想是“自适应”：
    1.  **快速过滤**: 首先，用硬件支持的、速度极快的标准浮点数进行计算。
    2.  **误差分析**: 同时，严格计算出这次运算可能产生的最大误差范围。
    3.  **可靠性检查**: 如果计算结果的绝对值远大于误差范围，那么结果就是
        可靠的，直接返回。这覆盖了99%以上的非退化情况。
    4.  **精确计算**: 只有当计算结果小到无法判断其真实符号时（即“危险”的
        退化情况，如三点共线），算法才会自动切换到一种更慢但绝对精确的
        高精度算术库来重新计算，以保证结果的100%正确。

通过使用本模块，我们的后端可以在绝大多数时间里保持极高的计算速度，同时
在遇到棘手的几何构型时，又能保证做出完全正确的决策。
"""
from robust import orient2d, incircle

def robust_orientation(p, q, r):
    """
    执行鲁棒的“方向测试”，判断有序点三元组 (p, q, r) 的转向。
    
    Args:
        p, q, r: 点的坐标元组或列表, e.g., (x, y)。

    Returns:
        一个浮点数，其符号具有几何意义:
        - > 0: p-q-r 构成一个“左转”（逆时针）。
        - < 0: p-q-r 构成一个“右转”（顺时针）。
        - = 0: p, q, r 三点共线。
    """
    return orient2d(p, q, r)

def robust_incircle(a, b, c, d):
    """
    执行鲁棒的“内切圆测试”，判断点d是否在由a,b,c三点定义的圆的内部。

    Args:
        a, b, c, d: 点的坐标元组或列表。

    Returns:
        一个浮点数，其符号具有几何意义:
        - > 0: 点d位于圆的内部。
        - < 0: 点d位于圆的外部。
        - = 0: a, b, c, d 四点共圆。
    """
    return incircle(a, b, c, d)